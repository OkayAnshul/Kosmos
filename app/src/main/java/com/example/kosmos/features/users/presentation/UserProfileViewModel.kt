package com.example.kosmos.features.users.presentation

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.kosmos.core.models.ChatRoom
import com.example.kosmos.core.models.ChatRoomType
import com.example.kosmos.core.models.User
import com.example.kosmos.data.repository.ChatRepository
import com.example.kosmos.data.repository.UserRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

/**
 * ViewModel for User Profile Screen
 * Handles loading and displaying user profile information
 */
@HiltViewModel
class UserProfileViewModel @Inject constructor(
    private val userRepository: UserRepository,
    private val chatRepository: ChatRepository,
    private val authRepository: com.example.kosmos.data.repository.AuthRepository,
    private val projectRepository: com.example.kosmos.data.repository.ProjectRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow(UserProfileState())
    val uiState: StateFlow<UserProfileState> = _uiState.asStateFlow()

    // Current logged-in user ID
    private var currentUserId: String? = null

    init {
        // Get current user ID from auth repository
        viewModelScope.launch {
            authRepository.currentUser.collect { user ->
                currentUserId = user?.id
            }
        }
    }

    /**
     * Load user profile by ID
     * Uses hybrid sync to get cached data first, then fresh from Supabase
     */
    fun loadUser(userId: String) {
        viewModelScope.launch {
            _uiState.value = UserProfileState(isLoading = true)

            userRepository.getUserByIdWithSync(userId).collect { result ->
                when {
                    result.isSuccess -> {
                        val user = result.getOrNull()
                        if (user != null) {
                            // Load shared project count
                            val sharedCount = try {
                                currentUserId?.let { myId ->
                                    projectRepository.getSharedProjectCount(myId, userId)
                                } ?: 0
                            } catch (e: Exception) {
                                Log.e("UserProfileVM", "Failed to load shared project count: ${e.message}")
                                0
                            }

                            _uiState.value = UserProfileState(
                                user = user,
                                sharedProjectCount = sharedCount,
                                isLoading = false,
                                error = null
                            )
                        } else {
                            _uiState.value = UserProfileState(
                                user = null,
                                isLoading = false,
                                error = "User not found"
                            )
                        }
                    }
                    result.isFailure -> {
                        val error = result.exceptionOrNull()
                        _uiState.value = UserProfileState(
                            user = null,
                            isLoading = false,
                            error = error?.message ?: "Failed to load user profile"
                        )
                    }
                }
            }
        }
    }

    /**
     * Create or get existing direct chat with a user
     * @param projectId Project context for the chat
     * @param targetUserId User to chat with
     */
    fun createOrGetDirectChat(projectId: String, targetUserId: String) {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isCreatingChat = true)

            try {
                // Get current user ID from auth repository
                val userId = currentUserId
                if (userId == null) {
                    Log.e("UserProfileVM", "Cannot create chat: User not logged in")
                    _uiState.value = _uiState.value.copy(
                        isCreatingChat = false,
                        error = "You must be logged in to start a chat"
                    )
                    return@launch
                }

                // Create chat room
                val chatRoom = ChatRoom(
                    id = "",  // Will be generated by repository
                    projectId = projectId,
                    name = "Direct Chat",  // Can be updated with display names
                    description = "Direct message",
                    type = ChatRoomType.DIRECT,
                    participantIds = listOf(userId, targetUserId),
                    createdBy = userId,
                    isPrivate = true,
                    isTaskBoardEnabled = true
                )

                val result = chatRepository.createChatRoom(chatRoom)
                if (result.isSuccess) {
                    val chatRoomId = result.getOrNull() ?: ""
                    Log.d("UserProfileVM", "Chat room created successfully: $chatRoomId")
                    _uiState.value = _uiState.value.copy(
                        isCreatingChat = false,
                        createdChatRoomId = chatRoomId
                    )
                } else {
                    Log.e("UserProfileVM", "Failed to create chat room: ${result.exceptionOrNull()}")
                    _uiState.value = _uiState.value.copy(
                        isCreatingChat = false,
                        error = "Failed to create chat"
                    )
                }
            } catch (e: Exception) {
                Log.e("UserProfileVM", "Exception creating chat: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    isCreatingChat = false,
                    error = "Failed to create chat: ${e.message}"
                )
            }
        }
    }
}

/**
 * UI State for User Profile Screen
 */
data class UserProfileState(
    val user: User? = null,
    val sharedProjectCount: Int = 0,
    val isLoading: Boolean = false,
    val isCreatingChat: Boolean = false,
    val createdChatRoomId: String? = null,
    val error: String? = null
)
